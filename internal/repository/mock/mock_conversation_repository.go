// Code generated by MockGen. DO NOT EDIT.
// Source: conversation.repository.go
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_conversation_repository.go -source=conversation.repository.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/raamaj/chat-app/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockConversationRepository is a mock of ConversationRepository interface.
type MockConversationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConversationRepositoryMockRecorder
}

// MockConversationRepositoryMockRecorder is the mock recorder for MockConversationRepository.
type MockConversationRepositoryMockRecorder struct {
	mock *MockConversationRepository
}

// NewMockConversationRepository creates a new mock instance.
func NewMockConversationRepository(ctrl *gomock.Controller) *MockConversationRepository {
	mock := &MockConversationRepository{ctrl: ctrl}
	mock.recorder = &MockConversationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationRepository) EXPECT() *MockConversationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConversationRepository) Create(db *gorm.DB, conversation *entity.Conversation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, conversation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockConversationRepositoryMockRecorder) Create(db, conversation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConversationRepository)(nil).Create), db, conversation)
}

// FindById mocks base method.
func (m *MockConversationRepository) FindById(db *gorm.DB, conversation *entity.Conversation, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", db, conversation, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockConversationRepositoryMockRecorder) FindById(db, conversation, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockConversationRepository)(nil).FindById), db, conversation, id)
}
